Problem 1 : Report Contiguos Dates

WITH CTE AS(
SELECT 'succeeded' AS period_state, success_date,
RANK() OVER(ORDER BY success_date) AS 'rnk'
FROM Succeeded WHERE YEAR(success_date) = 2019
UNION
SELECT 'failed' AS period_state, fail_date,
RANK() OVER(ORDER BY fail_date) AS 'rnk'
FROM Failed WHERE YEAR(fail_date) = 2019
)

SELECT period_state, MIN(success_date) AS 'start_date', MAX(success_date) AS 'end_date'
FROM (SELECT *, (RANK() OVER(ORDER BY success_date - rnk)) AS 'group_rnk' FROM CTE) AS y
GROUP BY group_rnk, period_state ORDER BY start_date;

Problem 2 : Student Report By Geography

WITH WINDOW FUNCTION 

WITH AM AS(
SELECT name AS 'America', ROW_NUMBER() OVER(ORDER BY name) AS 'rnk'
FROM Student WHERE continent = 'America'),

ASI AS(
SELECT name AS 'Asia', ROW_NUMBER() OVER(ORDER BY name) AS 'rnk'
FROM Student WHERE continent = 'Asia'),

EU AS(
SELECT name AS 'Europe', ROW_NUMBER() OVER(ORDER BY name) AS 'rnk'
FROM Student WHERE continent = 'Europe')

SELECT America, Asia, Europe 
FROM AM LEFT JOIN ASI ON AM.rnk = ASI.rnk
LEFT JOIN EU ON ASI.rnk = EU.rnk;

WITHOUT WINDOW FUNCTION

SELECT America, Asia, Europe FROM (
  (SELECT @am := 0, @as := 0, @eu := 0) t1,
  (SELECT @as := @as + 1 AS 'asrnk', name AS 'Asia' FROM Student WHERE continent = 'Asia' ORDER BY name) t2
  RIGHT JOIN (SELECT @am := @am + 1 AS 'amrnk', name AS 'America' FROM Student WHERE continent = 'America' 
  ORDER BY name) t3 ON t2.asrnk = t3.amrnk
  LEFT JOIN (SELECT @eu := @eu + 1 AS 'eurnk', name AS 'Europe' FROM Student WHERE continent = 'Europe' 
  ORDER BY name) t4 ON t3.amrnk = t4.eurnk
);

Problem 3 : Average Salary Department vs Company

WITH comp_avg AS(
SELECT DATE_FORMAT(pay_date, '%Y-%m') AS 'pay_month', AVG(amount) AS 'company_average'
FROM salary GROUP BY pay_month),

department_avg AS(
SELECT DATE_FORMAT(s.pay_date, '%Y-%m') AS 'pay_month', e.department_id, AVG(s.amount) AS 'department_average'
FROM salary s INNER JOIN employee e ON s.employee_id = e.employee_id
GROUP BY e.department_id, pay_month)

SELECT comp_avg.pay_month, department_avg.department_id, 
CASE
  WHEN department_avg.department_average > comp_avg.company_average THEN 'higher'
  WHEN department_avg.department_average = comp_avg.company_average THEN 'same'
  ELSE 'lower'
END AS 'comparison'
FROM department_avg INNER JOIN comp_avg ON department_avg.pay_month = comp_avg.pay_month;



Problem 4 : Game Play Analysis I

WITHOUT WINDOW FUNCTION 

SELECT player_id, MIN(event_date) AS 'first_login' FROM Activity GROUP BY player_id;

WITH WINDOW FUNCTION

WITH CTE AS(
SELECT *, RANK() OVER(PARTITION BY player_id ORDER BY event_date) AS 'rnk' FROM Activity)

SELECT player_id, event_date AS 'first_login' FROM CTE WHERE rnk = 1;